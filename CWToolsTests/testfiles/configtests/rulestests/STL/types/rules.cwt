#Type in alias
#Enum in alias
#Type specific file and skip root
#Type from file
types = {
    type[ship_size] = {
        path = "game/common/ship_sizes"
    }
    type[type_per_file] = {
        path = "game/common/anomalies"
        type_per_file = yes
        subtype[subtype_one] = {
            subtype = yes
        }
    }
    type[type_one_file] = {
        path = "game/common"
        path_file = "one_file.txt"
    }
    type[type_one_file_skip] = {
        path = "game/common"
        path_file = "one_file_skip.txt"
        skip_root_key = skip_me
    }
    type[type_one_file_multiple_skip] = {
        path = "game/common"
        path_file = "one_file_skip_multiple.txt"
        skip_root_key = skip_me_one
        skip_root_key = skip_me_two
    }
    type[type_one_file_multiple_skip_not] = {
        path = "game/common"
        path_file = "one_file_skip_multiple_not.txt"
        skip_root_key != skip_me_one
        skip_root_key != skip_me_two
    }
    type[event] = {
        path = "game/events"

        ## type_key_filter = ship_event
		## push_scope = ship
        subtype[ship] = {
        }

        ## type_key_filter = country_event
		## push_scope = country
        subtype[country] = {
        }

    }
    ## type_key_filter = { one two }
    type[multi_match] = {
        path = "game/common/starbase_modules"
    }
    ## type_key_filter <> { one two }
    type[multi_mismatch] = {
        path = "game/common/starbase_buildings"
    }

    type[starts_with_c] = {
        path = "game/common/deposits"
        path = "game/common/edicts"
        starts_with = c
        ## starts_with = c2
        subtype[starts_with_c2] =
        {

        }
    }

    type[starts_with_p] = {
        path = "game/common/deposits"
        path = "game/common/edicts"
        starts_with = p
    }

    type[recursive_subtype] = {
        path = "game/common/armies"
        subtype[subtype] = {
			## cardinality = 0..1
			start = yes
			## cardinality = 0..1
			parent = <recursive_subtype.subtype>
		}

    }
}
enums = {
enum[test_enum] = {
    my_enum
}
}

alias[effect:<ship_size>] = test
alias[effect:enum[test_enum]] = test
alias[effect:<type_per_file>] = test
alias[effect:<type_per_file.subtype_one>] = test2

## scope = ship
alias[effect:ship_only] = test

## scope = {ship country}
alias[effect:ship_and_country] = test

event = {
    alias_name[effect] = alias_match_left[effect]
    ## push_scope = ship
    ## cardinality = 0..inf
    ship = {
        alias_name[effect] = alias_match_left[effect]
    }
    ## push_scope = country
    ## cardinality = 0..inf
    country = {
        alias_name[effect] = alias_match_left[effect]
    }
}

type_per_file = {
    ## cardinality = 0..1
    subtype = bool
}

type_one_file = {
    test = test
    test2 = <type_one_file>
}

type_one_file_skip = {
    test = test
    ## cardinality = 0..1
    test2 = <type_one_file_skip>
}

type_one_file_multiple_skip = {
    test = test
    ## cardinality = 0..1
    test2 = <type_one_file_multiple_skip>
}

type_one_file_multiple_skip_not = {
    test = test
    ## cardinality = 0..1
    test2 = <type_one_file_multiple_skip_not>

}

alias[effect:type_one_file] = <type_one_file>
alias[effect:type_one_file_skip] = <type_one_file_skip>

alias[effect:type_one_file_prefix] = prefix_<type_one_file>
alias[effect:type_one_file_suffix] = <type_one_file>_suffix
alias[effect:type_one_file_both] = prefix_<type_one_file>_suffix

#Test value types
types = {
    type[special_project] = {
        path = "game/common/special_projects"
    }
}

special_project = {
    ## cardinality = 0..inf
    my_date = date_field
}

multi_match = {
}

multi_mismatch = {

}

starts_with_c = {
    c = true
    subtype[starts_with_c2] = {
        c2 = true
    }
}

starts_with_p = {
    p = true
}

recursive_subtype = {
    ## cardinality = 0..1
    start = yes
    ## cardinality = 0..1
    parent = <recursive_subtype.subtype>
}