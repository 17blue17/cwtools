

 <!-- Sets the basepath for the library if not in same directory -->
   <script type="text/javascript">
      mxBasePath = '../mxGraph';
   </script>

   <!-- Loads and initializes the library -->
   <script type="text/javascript" src="../mxGraph/mxClient.js"></script>

   <!-- Example code -->
   <script type="text/javascript">
      // Program starts here. Creates a sample graph in the
      // DOM node with the specified ID. This function is invoked
      // from the onLoad event handler of the document (see below).
      function main(container, data, triggers)
      {
         // Checks if the browser is supported
         if (!mxClient.isBrowserSupported())
         {
            mxUtils.error('Browser is not supported!', 200, false);
         }
         else
         {
             
            // Creates the graph inside the given container
            var graph = new mxGraph(container);
            graph.cellsResizable = false;
            graph.resizeContainer = true;

            var style = graph.getStylesheet().getDefaultEdgeStyle();
            style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;

            // Enables rubberband selection
            new mxRubberband(graph);

            // Gets the default parent for inserting new cells. This
            // is normally the first child of the root (ie. layer 0).
            var parent = graph.getDefaultParent();
            var roots = [];
            var options = [];


            try
            {
            var dict = {};
            // run through each element in json
            data.forEach(function(element) {
                var name = element.ID;
                // create graph element
                var graphElement = graph.insertVertex(parent, name,
                                                    name, 20, 20, 80, 30);
                
                // check if any parent element
                if(false && element.parentObjects.length > 0) {
                    // run through each parent element
                    element.parentObjects.forEach(function(parentObj) {
                    var parentGraphElement = dict[parentObj.name];
                    // add line between current element and parent
                    graph.insertEdge(parent, null, '', parentGraphElement, graphElement);          
                });
                } else {
                // set root for layouting
                roots.push(graphElement);
                }
                // add element to dictionary. this is needed to find object later(parent)
                dict[name] = graphElement;
            });
            var vertices = graph.getChildVertices(graph.getDefaultParent());
            triggers.forEach(function(trigger) {
                var parentID = trigger[0];
                var parent = vertices.find(function(e){return e.id == parentID});
                var children = trigger[1];
                children.forEach(function(childID) {
                    var child = vertices.find(function(e){return e.id == childID});
                    var option = graph.insertVertex(parent, null, '', 20, 20, 20, 20, 'constituent=1;')
                    options.push(option);
                    //roots.push(option);
                    graph.insertEdge(option, null,  '',option, child);
                    var t = graph.insertEdge(parent, null, '', parent, child);
                    t.visible = false;
                });
            });
            }
            finally
            {
            // Updates the display
            graph.getModel().endUpdate();
            
            // Creates a layout algorithm to be used
            // with the graph
            var layout = new mxHierarchicalLayout(graph, mxConstants.DIRECTION_NORTH);
            //layout.resizeParent = true;
            //layout.moveParent = true;
            //layout.parentBorder = 1;
            //layout.traverseAncestors = true;

            // Moves stuff wider apart than usual
            //layout.forceConstant = 140;
            if(roots) {
                roots.forEach(function(root){
                    graph.groupCells(null,1,root.children)
                    layout.execute(root, root.children);
                });
                //layout.execute(parent, options);
                layout.execute(parent, roots);
                //layout.traverseAncestors = true;
                //roots.forEach(function(root){
                //    layout.execute(root, root.children);
                //})
            }
            }
         }
      };
   </script>

<div class="row">
    <div class="col-md-4" id="dropzone" style="height=200px">
        <ul>

        </ul>
    </div>
    <div class="col-md-8">
        <ul>
            <li>One</li>
            <li>Two</li>
        </ul>
    </div>
    <div id="graphContainer"
      style="overflow:hidden;width:321px;height:241px;background:url('editors/images/grid.gif')">
   </div>
</div>

@section Scripts {
<script>
$(function() {
    $.ajax({
        url: "GetData"
    })
    .done(function(data){
        main(document.getElementById('graphContainer'), JSON.parse(data.item1), JSON.parse(data.item2));
    })
});
</script>
}